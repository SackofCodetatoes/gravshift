{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./javascript/camera.js","webpack:///./javascript/display.js","webpack:///./javascript/entry.js","webpack:///./javascript/game.js","webpack:///./javascript/game_entity.js","webpack:///./javascript/platform.js","webpack:///./javascript/player.js","webpack:///./javascript/room_seed.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA0C;;AAE1C,qBAAqB,uDAAU;AAC/B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACfrB;AAAA;AAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,gDAAI;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEe,sEAAO,E;;;;;;;;;;;;ACnCtB;AAAA;AAAkC;;;AAGlC,oBAAoB,mDAAO;AAC3B;AACA;AACA;AACA,6B;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACA;AACS;AACN;AACM;;AAE1C;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI,qDAAgB;AACpB,IAAI,qDAAgB;AACpB,IAAI,uDAAkB;AACtB,IAAI,sDAAiB;AACrB,IAAI,sDAAiB;AACrB,IAAI,qDAAgB;AACpB,IAAI,uDAAkB;AACtB,IAAI,uDAAkB;AACtB,IAAI,sDAAiB;;AAErB,sBAAsB,kDAAM;AAC5B,sBAAsB,kDAAM;;AAE5B;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,kBAAkB,0BAA0B;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;AC/NnB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEe,yEAAU,E;;;;;;;;;;;;ACzEzB;AAAA;AAA2C;;AAE3C,uBAAuB,uDAAW;AAClC;AACA;AACA;AACA;;;AAGA;;AAEe,uEAAQ,E;;;;;;;;;;;;ACXvB;AAAA;AAAyC;;AAEzC;;AAEA,qBAAqB,uDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,qC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;AAGe,qEAAM,E;;;;;;;;;;;;ACzFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACA;AACS;AACL;;;AAGrC;AACA;AACA,qBAAqB,oDAAQ,EAAE,sEAAsE;AACrG;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,oDAAQ,EAAE,2FAA2F;AAC3H;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oDAAQ,EAAE,wEAAwE;AACxG;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oDAAQ,EAAE,2FAA2F;AAC3H;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,oDAAQ,EAAE,uFAAuF;AACtH;;AAEA;AACA,qBAAqB,oDAAQ,EAAE,uFAAuF;AACtH;;AAEA;AACA,qBAAqB,oDAAQ,EAAE,wFAAwF;AACvH;;AAEA;AACA,qBAAqB,oDAAQ,EAAE,wFAAwF;AACvH;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,oDAAQ,EAAE,+HAA+H;AAC/J;AACA;;AAEA,sBAAsB,oDAAQ,EAAE,iGAAiG;AACjI;AACA;;AAEA,sBAAsB,oDAAQ,EAAE,yGAAyG;AACzI;AACA;;AAEA,sBAAsB,oDAAQ,EAAE,yGAAyG;AACzI;AACA;;AAEA,sBAAsB,oDAAQ,EAAE,yGAAyG;AACzI;AACA;;AAEA,sBAAsB,oDAAQ,EAAE,yGAAyG;AACzI;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,sBAAsB,oDAAQ,EAAE,sGAAsG;AACtI;AACA;;AAEA,iBAAiB,uDAAU,iBAAiB,cAAc,iCAAiC;AAC3F;AACA;;AAEA,iBAAiB,uDAAU,iBAAiB,cAAc,iCAAiC;AAC3F;AACA;;;AAGA;;AAEO;AACP,qBAAqB;;AAErB;AACA,qBAAqB,oDAAQ,EAAE,oGAAoG;AACnI;AACA;;AAEA;AACA;;AAEA,iBAAiB,oDAAQ,EAAE,oGAAoG;AAC/H;AACA;;;AAGA,iBAAiB,oDAAQ,EAAE,uGAAuG;AAClI;AACA;;AAEA,iBAAiB,oDAAQ,EAAE,6GAA6G;AACxI;AACA;;AAEA,iBAAiB,uDAAU,iBAAiB,cAAc,sCAAsC;AAChG;AACA;;AAEA,iBAAiB,oDAAQ,EAAE,4GAA4G;AACvI;AACA;AACA;;AAEO;AACP,qBAAqB;;AAErB;AACA;AACA;;;AAGA,qBAAqB,oDAAQ,EAAE,wFAAwF;AACvH;AACA;;AAEA,iBAAiB,oDAAQ,EAAE,wFAAwF;AACnH;AACA,iBAAiB,oDAAQ,EAAE,uFAAuF;AAClH;AACA,gBAAgB,uDAAU,iBAAiB,cAAc,0CAA0C;AACnG;;AAEA,YAAY,uDAAU,iBAAiB,cAAc,qFAAqF;AAC1I;;AAEA,YAAY,uDAAU,iBAAiB,cAAc,sFAAsF;AAC3I;;AAEA,YAAY,uDAAU,iBAAiB,cAAc,sFAAsF;AAC3I;;AAEA,0CAA0C,cAAc,oFAAoF;AAC5I;;AAEA,iBAAiB,oDAAQ,EAAE,yGAAyG;AACpI;;AAEA,iBAAiB,oDAAQ,EAAE,+GAA+G;AAC1I;;AAEA,iBAAiB,oDAAQ,EAAE,iFAAiF;AAC5G;AACA;AACA;;AAEO;AACP;AACA,qBAAqB,oDAAQ,EAAE,wGAAwG;AACvI;;AAEA,iBAAiB,oDAAQ,EAAE,+GAA+G;AAC1I;;;;AAIA,iBAAiB,oDAAQ,EAAE,gHAAgH;AAC3I;;AAEA,iBAAiB,oDAAQ,EAAE,gHAAgH;AAC3I;;AAEA,8BAA8B,gHAAgH;AAC9I;AACA;;AAEO;AACP,qBAAqB;;AAErB;;AAEA,qBAAqB,oDAAQ,EAAE,yGAAyG;AACxI;;AAEA,iBAAiB,oDAAQ,EAAE,+GAA+G;AAC1I;;AAEA,iBAAiB,oDAAQ,EAAE,oGAAoG;AAC/H;;AAEA,iBAAiB,oDAAQ,EAAE,gHAAgH;AAC3I;;AAEA,iBAAiB,oDAAQ,EAAE,0GAA0G;AACrI;;AAEA,iBAAiB,oDAAQ,EAAE,yFAAyF;AACpH;;AAEA;;AAEO;AACP,qBAAqB;;AAErB;AACA;;AAEA,qBAAqB,oDAAQ,EAAE,yFAAyF;AACxH;AACA,iBAAiB,oDAAQ,EAAE,yFAAyF;AACpH;;AAEA,iBAAiB,oDAAQ,EAAE,yFAAyF;AACpH;;AAEA,gBAAgB,uDAAU,iBAAiB,cAAc,2CAA2C;AACpG;;AAEA,iBAAiB,oDAAQ,EAAE,qGAAqG;AAChI;AACA,iBAAiB,oDAAQ,EAAE,2GAA2G;AACtI;;AAEA;AACO;AACP;AACA,qBAAqB,oDAAQ,EAAE,+GAA+G;AAC9I;AACA,iBAAiB,oDAAQ,EAAE,0GAA0G;AACrI;;AAEA,iBAAiB,oDAAQ,EAAE,2GAA2G;AACtI;;AAEA,iBAAiB,oDAAQ,EAAE,+GAA+G;AAC1I;AACA,iBAAiB,oDAAQ,EAAE,+GAA+G;AAC1I;AACA,iBAAiB,oDAAQ,EAAE,+GAA+G;AAC1I;AACA,qBAAqB;;AAErB,gBAAgB,uDAAU,iBAAiB,cAAc,mEAAmE;AAC5H;AACA;AACO;AACP;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./javascript/entry.js\");\n","import GameEntity from \"./game_entity.js\";\n\nclass Camera extends GameEntity {\n  constructor(options){\n    super(options);\n  }\n\n\n  draw(){\n    this.context.beginPath();\n    this.context.rect(0, 0, 1280, 720);\n    this.context.stroke();\n  }\n}\n\nexport default Camera;","import Game from \"./game.js\";\n\nclass Display {\n  constructor(){\n    this.canvas = document.getElementById('game-canvas');\n    this.context = this.canvas.getContext('2d');\n    let gameConfig = {\n      canvas: this.canvas,\n      context: this.context,\n    }\n\n    this.game = new Game(gameConfig);\n    this.game.initialize();\n\n    this.viewPort = {\n      x: 0,\n      y: 0,\n    }\n\n    this.render = this.render.bind(this);\n  }\n\n  render(){\n    //create request animation loop\n    this.context.clearRect(0, 0, 1280, 720);\n\n    this.context.drawImage(this.grid, 16, 282, 1584, 1020, -this.viewPort.x, -this.viewPort.y, 1584, 1020);\n\n    this.game.update(this.viewPort);\n\n    requestAnimationFrame(() => this.render());\n  }\n\n}\n\nexport default Display;","import Display from \"./display.js\"\n\n\nconst display = new Display();\nconst grid = new Image();\ngrid.src = \"./images/grid.png\";\ndisplay.grid = grid;\ngrid.onload = display.render;","import Player from \"./player.js\";\nimport Camera from \"./camera.js\";\nimport GameEntity from \"./game_entity.js\";\nimport Platform from \"./platform.js\"\nimport * as RoomSeed from './room_seed.js'\n\nconst PLAYER_KEYS = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', ' '];\n\n\nclass Game {\n  constructor(options){\n   //preload \n   this.canvas = options.canvas;\n   this.canvasHeight = options.canvas.height;\n   this.canvasWidth = options.canvas.width;\n   this.context = options.context;\n   this.platforms = [];\n   this.entities = [];\n   this.physicsObjs = [];\n   this.staticObjs = [];\n\n   this.gravDir = 1;\n\n   this.viewTransition = {dir: 'none', target: 0};\n  //  this.viewTransition = 'none';\n\n   this.platformCollision = this.platformCollision.bind(this);\n   this.physicsCollision = this.physicsCollision.bind(this);\n   this.viewTransitionCheck = this.viewTransitionCheck.bind(this);\n  }\n\n\n  initialize(){\n    //game init\n    let playerConfig = {\n      x: 50 + this.canvasWidth * 1 + 200,\n      y: 500 - this.canvasHeight * 2,\n      xLen: 25,\n      yLen: 25,\n      context: this.context,\n      game: this,\n      platformCollision: this.platformCollision,\n      physicsObj: true,\n      physicsCollision: this.physicsCollision,\n    }\n\n\n    RoomSeed.roomOne.call(this);\n    RoomSeed.roomTwo.call(this);\n    RoomSeed.roomThree.call(this);\n    RoomSeed.roomFour.call(this);\n    RoomSeed.roomFive.call(this);\n    RoomSeed.roomSix.call(this);\n    RoomSeed.roomSeven.call(this);\n    RoomSeed.roomEight.call(this);\n    RoomSeed.roomNine.call(this);\n\n    this.player = new Player(playerConfig);\n    this.camera = new Camera(playerConfig);\n\n    this.player.keyBind();\n\n    this.entities.push(this.player);\n    \n    this.physicsObjs.push(this.player);\n  }\n\n\n  update(viewPort){\n    //each game step\n    this.applyGravity();\n    \n\n    // if(this.player.x - viewPort.x < 0 || this.player.y > 720 || this.player.y < 0){\n    //   //restart\n    // }\n\n    this.viewTransitionCheck.call(this, viewPort);\n    for(let i = 0; i < this.entities.length; i++){\n      this.entities[i].update(viewPort);\n    }\n\n  }\n  viewTransitionCheck(viewPort){\n\n    //if not camera transitioning, set transition state\n    if(this.viewTransition.dir === 'none'){\n      if(this.player.x - viewPort.x > this.canvasWidth){\n        this.viewTransition.dir = 'right';\n        this.viewTransition.target = viewPort.x + this.canvasWidth\n      }\n      else if(this.player.x - viewPort.x < 0){\n        this.viewTransition.dir = 'left';\n        this.viewTransition.target = viewPort.x - this.canvasWidth\n      }\n      else if(this.player.y - viewPort.y > this.canvasHeight) {\n        this.viewTransition.dir = 'down';\n        this.viewTransition.target = viewPort.y + this.canvasHeight;\n      }\n      else if(this.player.y - viewPort.y < 0) {\n        this.viewTransition.dir = 'up';\n        this.viewTransition.target = viewPort.y - this.canvasHeight;\n      }\n\n    }\n\n    if(this.viewTransition.dir === 'left' || this.viewTransition.dir === 'right'){\n      //transition right\n      if(viewPort.x < this.viewTransition.target){\n        this.viewTransitionStep(this.viewTransition, viewPort);\n        if(viewPort.x >= this.viewTransition.target){\n          this.viewTransition.dir = 'none';\n          this.viewTransition.target = 0;\n        }\n      }\n      //transition left\n      else if(viewPort.x > this.viewTransition.target){\n        this.viewTransitionStep(this.viewTransition, viewPort);\n        if(viewPort.x <= this.viewTransition.target){\n          this.viewTransition.dir = 'none';\n          this.viewTransition.target = 0;\n        }\n      }\n    }\n    \n    else if(this.viewTransition.dir === 'up' || this.viewTransition.dir === 'down'){\n      //transition up\n      if(viewPort.y > this.viewTransition.target){\n        this.viewTransitionStep(this.viewTransition, viewPort);\n        if(viewPort.y <= this.viewTransition.target){\n          this.viewTransition.dir = 'none';\n          this.viewTransition.target = 0;\n        }\n      }\n      //transition down\n      else if(viewPort.y < this.viewTransition.target){\n        this.viewTransitionStep(this.viewTransition, viewPort);\n        if(viewPort.y >= this.viewTransition.target){\n          this.viewTransition.dir = 'none';\n          this.viewTransition.target = 0;\n        }\n      }\n\n    }\n  }\n  \n  viewTransitionStep(viewTransition, viewPort){\n    switch(viewTransition.dir){\n      case 'right':\n        viewPort.x += 40;\n      break;\n\n      case 'left': \n        viewPort.x -= 40;\n      break;\n\n      case 'up':\n        viewPort.y -= 40;\n      break;\n\n      case 'down':\n        viewPort.y += 40;\n      break;\n    }\n\n  }\n\n\n  physicsCollision(x, y, obj){\n    //check collision with physics objs\n    for (let i = 0; i < this.physicsObjs.length; i++) {\n      // obj.positionMeeting(obj.x, obj.y, platforms[i]);\n      if (\n        (\n          (x + obj.xLen > this.physicsObjs[i].x && x < this.physicsObjs[i].x + this.physicsObjs[i].xLen) &&\n          (y + obj.yLen > this.physicsObjs[i].y && y < this.physicsObjs[i].y + this.physicsObjs[i].yLen) && \n          obj != this.physicsObjs[i]\n        )\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  platformCollision(x, y, obj){\n  //check if new position overlaps with any platforms in platforms entitity\n    for (let i = 0; i < this.platforms.length; i++) {\n      // obj.positionMeeting(obj.x, obj.y, platforms[i]);\n      if (\n        (\n          (x + obj.xLen > this.platforms[i].x && x < this.platforms[i].x + this.platforms[i].xLen) &&\n          (y + obj.yLen > this.platforms[i].y && y < this.platforms[i].y + this.platforms[i].yLen)\n          )\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  applyGravity(){\n    //iterate over list of entities and apply gravity\n    for(let i = 0; i < this.physicsObjs.length; i++){\n      let curObj = this.physicsObjs[i];\n      \n      //normal gravity\n      if(this.gravDir > 0){\n        if(curObj.vspd < 8 && !this.platformCollision(curObj.x, curObj.y + curObj.vspd, curObj)){\n          curObj.vspd += 0.2;\n        }\n      }\n      else {\n        if(curObj.vspd > -6 && !this.platformCollision(curObj.x, curObj.y + curObj.vspd, curObj)) {\n          curObj.vspd -= 0.2;\n        }\n      }\n    }\n  }\n\n}\n\nexport default Game;","class GameEntity {\n  constructor(options){\n    this.active = true;\n    this.x = options.x;\n    this.y = options.y;\n    this.xLen = options.xLen;\n    this.yLen = options.yLen;\n    this.vspd = 0;\n    this.hspd = 0;\n    this.physicsObj = false || options.physicsObj;\n    this.defaultColor = options.color;\n\n    this.context = options.context;\n    this.platformCollision = options.platformCollision;\n    this.physicsCollision = options.physicsCollision;\n\n\n    this.draw = this.draw.bind(this);\n    this.stepCollisionCheck = this.stepCollisionCheck.bind(this);\n  }\n\n  draw(viewPort){\n    //check if sprite, else draw green\n    this.context.fillStyle = this.defaultColor || 'green';\n    this.context.fillRect(this.x - viewPort.x, this.y - viewPort.y, this.xLen, this.yLen);\n  }\n\n  update(viewPort){\n    if(this.active){\n      if(this.physicsObj){\n        this.stepCollisionCheck();\n      }\n      this.draw(viewPort);\n    }\n  }\n\n  stepCollisionCheck(){\n    if (!this.platformCollision(this.x + this.hspd, this.y, this) && !this.physicsCollision(this.x + this.hspd, this.y, this)) {\n      this.x += this.hspd;\n    } else {\n      let sign = 1;\n      this.hspd < 0 ? sign = -1 : sign = sign;\n      while (!this.platformCollision(this.x + sign, this.y, this) && !this.physicsCollision(this.x + sign, this.y, this)) {\n        this.x += sign;\n      }\n    }\n\n    this.hspd = 0;\n\n    if (!this.platformCollision(this.x, this.y + this.vspd, this) && !this.physicsCollision(this.x, this.y + this.vspd, this)) {\n      this.y += this.vspd;\n    } else {\n      let sign = 1;\n      this.vspd < 0 ? sign = -1 : sign = sign;\n      while (!this.platformCollision(this.x, this.y + sign, this) && !this.physicsCollision(this.x, this.y + sign, this)) {\n        this.y += sign;\n      }\n\n\n      this.vspd = 0;\n    }\n  }\n\n  positionMeeting(x, y, obj){\n    if ((x + this.xLen > obj.x && x < obj.x + obj.xLen) &&\n      (y + this.yLen > obj.y && y < obj.y + obj.yLen)\n    ) {\n      return true;\n    } // end of if\n    return false;\n  }\n}\n\nexport default GameEntity;","import GameEntitiy from \"./game_entity.js\";\n\nclass Platform extends GameEntitiy {\n  constructor(options){\n    super(options);\n    this.defaultColor = 'gray'\n  }\n\n\n}\n\nexport default Platform;","import GameEntity from \"./game_entity.js\"\n\nconst PLAYER_KEYS = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', ' '];\n\nclass Player extends GameEntity {\n  constructor(options){\n    super(options);\n    this.moveSpd = 4;\n    this.jumpSpd = 6;\n    this.game = options.game;\n    this.platformCollision = options.platformCollision;\n    \n    this.state = 'moving';\n\n\n    this.takeInput = this.takeInput.bind(this);\n  }\n\n  keyBind() {\n    this.playerInput = {\n      ArrowLeft: false,\n      ArrowRight: false, \n      ArrowUp: false, \n      ArrowDown: false,\n      ' ': false,\n      canJump: true,\n      canInvert: true,\n    };\n\n    const canvas = document.getElementById('game-canvas');\n\n    //key press\n    document.addEventListener('keydown', (event) => {\n      const keyName = event.key;\n      if(PLAYER_KEYS.includes(event.key)){\n        this.playerInput[event.key] = true;\n      }\n    });\n    // key release\n    document.addEventListener('keyup', (event) => {\n      if (PLAYER_KEYS.includes(event.key)) {\n        this.playerInput[event.key] = false;\n      }\n    });\n\n  }// end of keybind\n\n  draw(viewPort){\n    this.context.fillStyle = 'blue';\n    this.context.fillRect(this.x - viewPort.x, this.y - viewPort.y, 25, 25);\n  }\n\n  takeInput(viewPort){\n    if (this.playerInput.ArrowLeft) {     \n        this.hspd = -this.moveSpd;\n    }\n    if (this.playerInput.ArrowRight) {\n        this.hspd = this.moveSpd;\n    }\n\n    if(this.playerInput[' '] && this.playerInput.canJump){\n      this.vspd = this.jumpSpd * -this.game.gravDir;\n      this.playerInput.canJump = false;\n    }\n    if(this.playerInput.ArrowUp && this.playerInput.canInvert) {\n      this.game.gravDir = this.game.gravDir * -1;\n      this.playerInput.canInvert = false;\n    }\n  }\n\n  update(viewPort){\n    this.takeInput();\n\n    this.stepCollisionCheck();\n    \n    //reset jump limit\n    if (this.platformCollision(this.x, this.y + (1 * this.game.gravDir), this) || this.physicsCollision(this.x, this.y + (1 * this.game.gravDir), this)) {\n      this.playerInput.canJump = true;\n      this.playerInput.canInvert = true;\n    }\n    \n\n    this.draw(viewPort);\n  }\n\n\n}\n\n\nexport default Player;","import Player from \"./player.js\";\nimport Camera from \"./camera.js\";\nimport GameEntity from \"./game_entity.js\";\nimport Platform from \"./platform.js\";\n\n\nconst top = function() {\n    //top\n  let platform = new Platform({ x: 0, y: 0, xLen: this.canvasWidth, yLen: 25, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n  \n}\nconst bottom = function() {\n  //bottom\n  let platform3 = new Platform({ x: 0, y: this.canvasHeight - 25, xLen: this.canvasWidth, yLen: 25, context: this.context })\n  this.platforms.push(platform3);\n  this.entities.push(platform3);\n}\n\nconst left = function() {\n  //left\n  let platform2 = new Platform({ x: 0, y: 25, xLen: 25, yLen: this.canvasHeight, context: this.context })\n  this.platforms.push(platform2);\n  this.entities.push(platform2);\n}\n\nconst right = function (){\n  //right\n  let platform4 = new Platform({ x: this.canvasWidth - 25, y: 0, xLen: 25, yLen: this.canvasHeight, context: this.context })\n  this.platforms.push(platform4);\n  this.entities.push(platform4);\n}\n\nconst platformAdder = function(platform){\n  this.platforms.push(platform);\n  this.entities.push(platform);\n}\nconst boxAdder = function(box){\n  this.physicsObjs.push(box);\n  this.entities.push(box);\n}\n\nconst wall = function(side, offsetX, offsetY){\n  let platform;\n  switch(side){\n    case 'top':\n      platform = new Platform({ x: offsetX, y: offsetY - 25, xLen: this.canvasWidth, yLen: 50, context: this.context }) \n    break;\n\n    case 'bottom':\n      platform = new Platform({ x: offsetX, y: offsetY - 25, xLen: this.canvasWidth, yLen: 50, context: this.context })\n    break;\n\n    case 'left':\n      platform = new Platform({ x: offsetX - 25, y: offsetY, xLen: 50, yLen: this.canvasHeight, context: this.context })\n    break;\n\n    case 'right':\n      platform = new Platform({ x: offsetX - 25, y: offsetY, xLen: 50, yLen: this.canvasHeight, context: this.context })\n    break;\n  }\n  this.platforms.push(platform);\n  this.entities.push(platform);\n\n}\n\nexport const roomOne = function() {\n  //basic square\n  wall.call(this, 'top', 0, 0);\n  wall.call(this, 'bottom', 0, this.canvasHeight);\n  wall.call(this, 'left', 0, 0);\n  wall.call(this, 'right', this.canvasWidth, 100);\n\n  this.platform = new Platform({ x: this.canvasWidth / 2 - 100, y: this.canvasHeight - 100, xLen: this.canvasWidth / 2 + 100, yLen: 75, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n  this.platform = new Platform({ x: 0, y: this.canvasHeight - 175, xLen: this.canvasWidth / 2 , yLen: 25, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n  this.platform = new Platform({ x: 100, y: this.canvasHeight - 250, xLen: this.canvasWidth / 2  - 200, yLen: 25, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n  this.platform = new Platform({ x: 300, y: this.canvasHeight - 325, xLen: this.canvasWidth / 2  - 250, yLen: 25, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n  this.platform = new Platform({ x: 450, y: this.canvasHeight - 400, xLen: this.canvasWidth / 2  - 250, yLen: 25, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n  this.platform = new Platform({ x: 550, y: this.canvasHeight - 475, xLen: this.canvasWidth / 2  - 250, yLen: 25, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n}\n\nexport const roomTwo = function() {\n  const boxConfig = {\n    x: 50,\n    y: 500,\n    xLen: 25,\n    yLen: 25,\n    context: this.context,\n    game: this,\n    platformCollision: this.platformCollision,\n    physicsObj: true,\n    physicsCollision: this.physicsCollision,\n  }\n  wall.call(this, 'top', this.canvasWidth * 1, 0);\n  wall.call(this, 'bottom', this.canvasWidth * 1, this.canvasHeight);\n  wall.call(this, 'right', this.canvasWidth * 2, 100);\n\n\n  this.platform = new Platform({ x: this.canvasWidth * 1 + 300, y: 0, xLen: 25, yLen: this.canvasHeight - 200, context: this.context })\n  this.platforms.push(this.platform);\n  this.entities.push(this.platform);\n\n  this.box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth + 100, y: 30}));\n  this.entities.push(this.box);\n  this.physicsObjs.push(this.box);\n  \n  this.box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth + 400, y: 30}));\n  this.entities.push(this.box);\n  this.physicsObjs.push(this.box);\n\n\n}\n\nexport const roomThree = function() {\n  const boxConfig = { x: 50, y: 500, xLen: 100, yLen: 150, context: this.context, game: this, platformCollision: this.platformCollision, physicsObj: true, physicsCollision: this.physicsCollision,}\n\n  // wall.call(this, 'top', this.canvasWidth * 2, 0);\n  let platform = new Platform({ x: this.canvasWidth * 2, y: 0 - 25, xLen: this.canvasWidth - 100, yLen: 50, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n\n  wall.call(this, 'bottom', this.canvasWidth * 2, this.canvasHeight);\n  wall.call(this, 'right', this.canvasWidth * 3, 0);\n\n  platform = new Platform({ x: this.canvasWidth * 2 + 300, y: 0, xLen: 25, yLen: this.canvasHeight / 2, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n\n  \n  platform = new Platform({ x: this.canvasWidth * 2  + 150, y: this.canvasHeight / 2, xLen: 360, yLen: 25, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n  \n  platform = new Platform({ x: this.canvasWidth * 2  + 300, y: this.canvasHeight / 2 + 175, xLen: 25, yLen: 125, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n\n  this.box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 + 325, y: 400}));\n  this.entities.push(this.box);\n  this.physicsObjs.push(this.box);\n\n  platform = new Platform({ x: this.canvasWidth * 3 - 200, y: this.canvasHeight / 2 - 200, xLen: 200, yLen: 25, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n}\n\nexport const roomFour = function(){\n  const boxConfig = { x: 50, y: 500, xLen: 25, yLen: 75, context: this.context, game: this, platformCollision: this.platformCollision, physicsObj: true, physicsCollision: this.physicsCollision, }\n\n  // wall.call(this, 'left', this.canvasWidth * 2, 0 - this.canvasHeight)\n  wall.call(this, 'right', this.canvasWidth * 3, 0 - this.canvasHeight)\n  wall.call(this, 'top', this.canvasWidth * 2, 0 - this.canvasHeight)\n  \n\n  let platform = new Platform({ x: this.canvasWidth * 2 + 420, y: 0 - 200, xLen: 200, yLen: 25, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n\n  platform = new Platform({ x: this.canvasWidth * 2 + 420, y: 0 - 550, xLen: 200, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n  platform = new Platform({ x: this.canvasWidth * 2 + 420, y: 0 - 175, xLen: 25, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n  let box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 + 420, y: 0 - 150}))\n  boxAdder.call(this, box);\n\n  box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 + 25, y: 0 - this.canvasHeight + 25, xLen: 100, yLen: 75 * 4}))\n  boxAdder.call(this, box)\n  \n  box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 + 125, y: 0 - this.canvasHeight + 25, xLen: 100, yLen: 75 * 3}))\n  boxAdder.call(this, box)\n\n  box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 + 225, y: 0 - this.canvasHeight + 25, xLen: 100, yLen: 75 * 2}))\n  boxAdder.call(this, box)\n  \n  // box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 + 25, y: 0 - this.canvasHeight + 25, xLen: 75, yLen: 75 * 4}))\n  // boxAdder.call(this, box)\n  \n  platform = new Platform({ x: this.canvasWidth * 2 - 25, y: 0 - this.canvasHeight * 1, xLen: 50, yLen: 325, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth * 2 - 25, y: 0 - this.canvasHeight * 1 + 425, xLen: 50, yLen: 215, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth * 2, y: 0 - 75, xLen: 350, yLen: 75, context: this.context })\n  this.platforms.push(platform);\n  this.entities.push(platform);\n}\n\nexport const roomFive = function(){\n  wall.call(this, 'top', this.canvasWidth * 1, 0 - this.canvasHeight);\n  let platform = new Platform({ x: this.canvasWidth * 1 - 25, y: 0 - this.canvasHeight * 1, xLen: 50, yLen: 75, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth * 1 - 25, y: 0 - this.canvasHeight * 1 + 175, xLen: 50, yLen: 465, context: this.context })\n  platformAdder.call(this, platform);\n  \n\n\n  platform = new Platform({ x: this.canvasWidth * 1 + 540, y: 0 - this.canvasHeight * 1 + 300, xLen: 100, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth * 1 + 250, y: 0 - this.canvasHeight * 1 + 300, xLen: 150, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n\n  // platform = new Platform({ x: this.canvasWidth * 1 + 250, y: 0 - this.canvasHeight * 1 + 300, xLen: 150, yLen: 25, context: this.context })\n  // platformAdder.call(this, platform);\n}\n\nexport const roomSix = function(){\n  const boxConfig = { x: 50, y: 500, xLen: 75, yLen: 100, context: this.context, game: this, platformCollision: this.platformCollision, physicsObj: true, physicsCollision: this.physicsCollision, }\n\n  wall.call(this, 'left', this.canvasWidth * 0, 0 - this.canvasHeight);\n\n  let platform = new Platform({ x: this.canvasWidth * 0, y: 0 - this.canvasHeight * 1 - 25, xLen: 100, yLen: 50, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth * 0 + 240, y: 0 - this.canvasHeight * 1 - 25, xLen: 400, yLen: 50, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth / 2, y: 0 - this.canvasHeight * 1, xLen: 25, yLen: 400, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth / 2 + 140, y: 0 - this.canvasHeight * 1 + 200, xLen: 200, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: this.canvasWidth / 2, y: 0 - this.canvasHeight * 1 + 375, xLen: 200, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: 100, y: 0 - this.canvasHeight * 1 + 375, xLen: 100, yLen: 25, context: this.context } )\n  platformAdder.call(this, platform);\n\n}\n\nexport const roomSeven = function(){\n  const boxConfig = { x: 50, y: 500, xLen: 50, yLen: 100, context: this.context, game: this, platformCollision: this.platformCollision, physicsObj: true, physicsCollision: this.physicsCollision, }\n\n  wall.call(this, 'top', 0, 0 - this.canvasHeight * 2)\n  wall.call(this, 'left', 0, 0 - this.canvasHeight * 2)\n\n  let platform = new Platform({ x: 100, y: 0 - this.canvasHeight * 2 + 500, xLen: 140, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n  platform = new Platform({ x: 300, y: 0 - this.canvasHeight * 2 + 250, xLen: 140, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n\n  platform = new Platform({ x: 400, y: 0 - this.canvasHeight * 2 + 450, xLen: 140, yLen: 25, context: this.context })\n  platformAdder.call(this, platform);\n\n  let box = new GameEntity(Object.assign({}, boxConfig, {x: 380, y: 0 - this.canvasHeight * 2 + 300}))\n  boxAdder.call(this, box);\n\n  platform = new Platform({ x: this.canvasWidth - 25, y: 0 - this.canvasHeight * 2, xLen: 50, yLen: 100, context: this.context })\n  platformAdder.call(this, platform);\n  platform = new Platform({ x: this.canvasWidth - 25, y: 0 - this.canvasHeight * 2 + 200, xLen: 50, yLen: 440, context: this.context })\n  platformAdder.call(this, platform);\n\n}\nexport const roomEight = function(){\n  wall.call(this, 'top', this.canvasWidth, 0 - this.canvasHeight * 2)\n  let platform = new Platform({ x: this.canvasWidth * 2 - 25, y: 0 - this.canvasHeight * 2 + 200, xLen: 50, yLen: 440, context: this.context })\n  platformAdder.call(this, platform);\n  platform = new Platform({ x: this.canvasWidth * 2 - 25, y: 0 - this.canvasHeight * 2 , xLen: 50, yLen: 100, context: this.context })\n  platformAdder.call(this, platform)\n\n  platform = new Platform({ x: this.canvasWidth * 2 - 250, y: 0 - this.canvasHeight * 2 , xLen: 25, yLen: 450, context: this.context })\n  platformAdder.call(this, platform)\n\n  platform = new Platform({ x: this.canvasWidth * 2 - 550, y: 0 - this.canvasHeight * 2 + 200, xLen: 75, yLen: 25, context: this.context })\n  platformAdder.call(this, platform)\n  platform = new Platform({ x: this.canvasWidth * 2 - 350, y: 0 - this.canvasHeight * 2 + 300, xLen: 75, yLen: 25, context: this.context })\n  platformAdder.call(this, platform)\n  platform = new Platform({ x: this.canvasWidth * 2 - 500, y: 0 - this.canvasHeight * 2 + 400, xLen: 75, yLen: 25, context: this.context })\n  platformAdder.call(this, platform)\n  const boxConfig = { x: 50, y: 500, xLen: 25, yLen: 75, context: this.context, game: this, platformCollision: this.platformCollision, physicsObj: true, physicsCollision: this.physicsCollision, }\n\n  let box = new GameEntity(Object.assign({}, boxConfig, {x: this.canvasWidth * 2 - 125, y: 0 - this.canvasHeight * 2 + 100 }))\n  boxAdder.call(this, box);\n}\nexport const roomNine = function(){\n  wall.call(this, 'top', this.canvasWidth * 2, 0 - this.canvasHeight * 2)\n  wall.call(this, 'right', this.canvasHeight * 3, 0 - this.canvasHeight * 2)\n\n}\n\n"],"sourceRoot":""}